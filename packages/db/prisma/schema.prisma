// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex", "fullTextSearch"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Restaurant {
  id                   String              @id @default(cuid())
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  googleId             String              @unique
  s3ImageKey           String?
  googlePhotoReference String?             @db.Text
  name                 String
  address              String
  websiteUrl           String?
  googleUrl            String?
  lat                  Float
  lng                  Float
  cusines              Restaurant_Cusine[]
  reviews              Review[]
  PersonalNote         PersonalNote[]
  lists                List[]

  @@fulltext([name])
  @@fulltext([address])
  @@fulltext([address, name])
}

model Restaurant_Cusine {
  id           String     @id @default(cuid())
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId String
  cusine       Cusine

  @@index([restaurantId])
}

model User {
  id           String         @id
  username     String?
  reviews      Review[]
  followedBy   User[]         @relation("UserFollows")
  following    User[]         @relation("UserFollows")
  tags         Tag[]
  PersonalNote PersonalNote[]
  List         List[]
}

model Review {
  id           String     @id @default(cuid())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  rating       Int
  foodName     FoodName[]
  content      String
  date         DateTime   @db.Date
  isTakeout    Boolean    @default(false)
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId String
  s3ImageKey   String?
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  tags         Tag[]

  @@index([restaurantId])
  @@index([userId])
}

model Tag {
  id      String   @id @default(cuid())
  name    String
  reviews Review[]
  user    User     @relation(fields: [userId], references: [id])
  userId  String

  @@unique([name, userId])
  @@index([userId])
}

enum Cusine {
  AMERICAN
  ASIAN
  BAKERY
  BARBECUE
  BREAKFAST
  BRUNCH
  BURGERS
  CAFE
  CHINESE
  DELI
  DESSERT
  DINER
  FAST_FOOD
  FRENCH
  GERMAN
  GREEK
  GRILL
  INDIAN
  ITALIAN
  JAPANESE
  KOREAN
  MEDITERRANEAN
  MEXICAN
  PIZZA
  SEAFOOD
  STEAK
  SUSHI
  THAI
  VIETNAMESE
  OTHER
}

model FoodName {
  id       String @id @default(cuid())
  name     String
  review   Review @relation(fields: [reviewId], references: [id])
  reviewId String

  @@index([reviewId])
}

model PersonalNote {
  id           String     @id @default(cuid())
  content      String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId String
  user         User       @relation(fields: [userId], references: [id])
  userId       String

  @@index([id])
  @@index([restaurantId, userId])
  @@index([userId])
}

model List {
  id          String       @id @default(cuid())
  name        String
  description String?
  restaurants Restaurant[]
  user        User[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

}
